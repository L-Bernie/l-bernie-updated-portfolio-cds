import _decorate from "@babel/runtime/helpers/esm/decorate";
let _ = t => t,
  _t;
/**
 * @license
 *
 * Copyright IBM Corp. 2019, 2024
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { LitElement, html } from 'lit';
import { property } from 'lit/decorators.js';
import { prefix } from '../../globals/settings';
import styles from "././ai-skeleton.css.js";
import '../skeleton-text/skeleton-text';
import { carbonElement as customElement } from '../../globals/decorators/carbon-element';

/**
 * AI skeleton text.
 *
 * @element cds-ai-skeleton-text
 */
let CDSAISkeletonText = _decorate([customElement(`${prefix}-ai-skeleton-text`)], function (_initialize, _LitElement) {
  class CDSAISkeletonText extends _LitElement {
    constructor(...args) {
      super(...args);
      _initialize(this);
    }
  }
  return {
    F: CDSAISkeletonText,
    d: [{
      kind: "field",
      decorators: [property({
        type: Boolean,
        reflect: true
      })],
      key: "heading",
      value() {
        return false;
      }
    }, {
      kind: "field",
      decorators: [property({
        reflect: true
      })],
      key: "width",
      value() {
        return '100%';
      }
    }, {
      kind: "field",
      decorators: [property({
        type: Boolean,
        reflect: true
      })],
      key: "paragraph",
      value() {
        return false;
      }
    }, {
      kind: "field",
      decorators: [property({
        type: Number,
        reflect: true
      })],
      key: "lineCount",
      value() {
        return 3;
      }
    }, {
      kind: "method",
      key: "render",
      value:
      /**
       * Generates skeleton text at a larger size.
       */

      /**
       * width (in px or %) of single line of text or max-width of paragraph lines
       */

      /**
       * will generate multiple lines of text
       */

      /**
       * the number of lines in a paragraph
       */

      function render() {
        const {
          heading,
          width,
          lineCount,
          paragraph
        } = this;
        return html(_t || (_t = _`<cds-skeleton-text
      type="${0}"
      width="${0}"
      linecount="${0}"
      ?paragraph="${0}"
      optional-classes="${0}--skeleton__text--ai"></cds-skeleton-text>`), heading ? 'heading' : '', width, lineCount, paragraph, prefix);
      }
    }, {
      kind: "field",
      static: true,
      key: "styles",
      value() {
        return styles;
      }
    }]
  };
}, LitElement);
export default CDSAISkeletonText;
//# sourceMappingURL=ai-skeleton-text.js.map
