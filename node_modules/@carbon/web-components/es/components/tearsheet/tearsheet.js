import _decorate from "@babel/runtime/helpers/esm/decorate";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _get from "@babel/runtime/helpers/esm/get";
let _ = t => t,
  _t,
  _t2,
  _t3,
  _t4,
  _t5,
  _t6,
  _t7,
  _t8,
  _t9;
function _superPropGet(t, e, r, o) { var p = _get(_getPrototypeOf(1 & o ? t.prototype : t), e, r); return 2 & o ? function (t) { return p.apply(r, t); } : p; }
/**
 * @license
 *
 * Copyright IBM Corp. 2023, 2024
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { LitElement, html } from 'lit';
import { property, query, queryAssignedElements, state } from 'lit/decorators.js';
import { prefix } from '../../globals/settings';
import HostListener from '../../globals/decorators/host-listener';
import HostListenerMixin from '../../globals/mixins/host-listener';
import styles from "././tearsheet.css.js";
import { selectorTabbable } from '../../globals/settings';
import { carbonElement as customElement } from '../../globals/decorators/carbon-element';
import '../button/index';
import '../layer/index';
import '../button/button-set-base';
import '../modal/index';
import { TEARSHEET_INFLUENCER_PLACEMENT, TEARSHEET_INFLUENCER_WIDTH, TEARSHEET_WIDTH } from './defs';
export { TEARSHEET_INFLUENCER_PLACEMENT, TEARSHEET_INFLUENCER_WIDTH, TEARSHEET_WIDTH };
const maxStackDepth = 3;
// eslint-disable-next-line no-bitwise
const PRECEDING = Node.DOCUMENT_POSITION_PRECEDING | Node.DOCUMENT_POSITION_CONTAINS;
// eslint-disable-next-line no-bitwise
const FOLLOWING = Node.DOCUMENT_POSITION_FOLLOWING | Node.DOCUMENT_POSITION_CONTAINED_BY;
const blockClass = `${prefix}--tearsheet`;
const blockClassModalHeader = `${prefix}--modal-header`;
const blockClassActionSet = `${prefix}--action-set`;

/**
 * Tries to focus on the given elements and bails out if one of them is successful.
 *
 * @param elems The elements.
 * @param reverse `true` to go through the list in reverse order.
 * @returns `true` if one of the attempts is successful, `false` otherwise.
 */
function tryFocusElems(elems, reverse) {
  if (!reverse) {
    for (let i = 0; i < elems.length; ++i) {
      const elem = elems[i];
      elem.focus();
      if (elem.ownerDocument.activeElement === elem) {
        return true;
      }
    }
  } else {
    for (let i = elems.length - 1; i >= 0; --i) {
      const elem = elems[i];
      elem.focus();
      if (elem.ownerDocument.activeElement === elem) {
        return true;
      }
    }
  }
  return false;
}

/**
 * Tearsheet.
 *
 * @element cds-tearsheet
 * @csspart dialog The dialog.
 * @fires cds-tearsheet-beingclosed
 *   The custom event fired before this tearsheet is being closed upon a user gesture.
 *   Cancellation of this event stops the user-initiated action of closing this tearsheet.
 * @fires cds-tearsheet-closed - The custom event fired after this tearsheet is closed upon a user gesture.
 */
let CDSTearsheet = _decorate([customElement(`${prefix}-tearsheet`)], function (_initialize, _HostListenerMixin) {
  class CDSTearsheet extends _HostListenerMixin {
    constructor(...args) {
      super(...args);
      _initialize(this);
    }
  }
  return {
    F: CDSTearsheet,
    d: [{
      kind: "field",
      key: "_launcher",
      value() {
        return null;
      }
    }, {
      kind: "field",
      decorators: [query('#start-sentinel')],
      key: "_startSentinelNode",
      value: void 0
    }, {
      kind: "field",
      decorators: [query('#end-sentinel')],
      key: "_endSentinelNode",
      value: void 0
    }, {
      kind: "field",
      decorators: [query(`.${blockClass}__container`)],
      key: "_tearsheet",
      value: void 0
    }, {
      kind: "field",
      decorators: [queryAssignedElements({
        slot: 'actions',
        selector: `${prefix}-button`
      })],
      key: "_actions",
      value: void 0
    }, {
      kind: "field",
      decorators: [state()],
      key: "_actionsCount",
      value() {
        return 0;
      }
    }, {
      kind: "field",
      decorators: [state()],
      key: "_hasHeaderActions",
      value() {
        return false;
      }
    }, {
      kind: "field",
      decorators: [state()],
      key: "_hasLabel",
      value() {
        return false;
      }
    }, {
      kind: "field",
      decorators: [state()],
      key: "_hasSlug",
      value() {
        return false;
      }
    }, {
      kind: "field",
      decorators: [state()],
      key: "_hasTitle",
      value() {
        return false;
      }
    }, {
      kind: "field",
      decorators: [state()],
      key: "_hasDescription",
      value() {
        return false;
      }
    }, {
      kind: "field",
      decorators: [state()],
      key: "_hasInfluencerLeft",
      value() {
        return false;
      }
    }, {
      kind: "field",
      decorators: [state()],
      key: "_hasInfluencerRight",
      value() {
        return false;
      }
    }, {
      kind: "field",
      decorators: [state()],
      key: "_isOpen",
      value() {
        return false;
      }
    }, {
      kind: "field",
      decorators: [state()],
      key: "_hasHeaderNavigation",
      value() {
        return false;
      }
    }, {
      kind: "field",
      decorators: [HostListener('click')],
      key: "_handleClick",
      value() {
        return event => {
          if (event.composedPath().indexOf(this.shadowRoot) < 0 && !this.preventCloseOnClickOutside) {
            this._handleUserInitiatedClose(event.target);
          }
        };
      }
    }, {
      kind: "field",
      decorators: [HostListener('shadowRoot:focusout')],
      key: "_handleBlur",
      value() {
        return async ({
          target,
          relatedTarget
        }) => {
          var _this$shadowRoot;
          if (!this._topOfStack()) {
            return;
          }
          const {
            // condensedActions,
            open,
            _startSentinelNode: startSentinelNode,
            _endSentinelNode: endSentinelNode
          } = this;
          const oldContains = target !== this && this.contains(target);
          const currentContains = relatedTarget !== this && (this.contains(relatedTarget) || ((_this$shadowRoot = this.shadowRoot) === null || _this$shadowRoot === void 0 ? void 0 : _this$shadowRoot.contains(relatedTarget)) && relatedTarget !== startSentinelNode && relatedTarget !== endSentinelNode);

          // Performs focus wrapping if _all_ of the following is met:
          // * This tearsheet is open
          // * The viewport still has focus
          // * Tearsheet body used to have focus but no longer has focus
          const {
            selectorTabbable: selectorTabbableForTearsheet
          } = this.constructor;
          if (open && relatedTarget && oldContains && !currentContains) {
            const comparisonResult = target.compareDocumentPosition(relatedTarget);
            // eslint-disable-next-line no-bitwise
            if (relatedTarget === startSentinelNode || comparisonResult & PRECEDING) {
              await this.constructor._delay();
              if (!tryFocusElems(this.querySelectorAll(selectorTabbableForTearsheet), true) && relatedTarget !== this) {
                this.focus();
              }
            }
            // eslint-disable-next-line no-bitwise
            else if (relatedTarget === endSentinelNode || comparisonResult & FOLLOWING) {
              await this.constructor._delay();
              if (!tryFocusElems(this.querySelectorAll(selectorTabbableForTearsheet), true)) {
                this.focus();
              }
            }
          }
        };
      }
    }, {
      kind: "field",
      decorators: [HostListener('document:keydown')],
      key: "_handleKeydown",
      value() {
        return ({
          key,
          target
        }) => {
          if ((key === 'Esc' || key === 'Escape') && this._topOfStack()) {
            this._handleUserInitiatedClose(target);
          }
        };
      }
    }, {
      kind: "method",
      key: "_checkSetHasSlot",
      value:
      /**
       * The element that had focus before this tearsheet gets open.
       */

      /**
       * Node to track focus going outside of tearsheet content.
       */

      /**
       * Node to track focus going outside of tearsheet content.
       */

      /**
       * Node to track tearsheet.
       */

      /**
       * Handles `click` event on this element.
       *
       * @param event The event.
       */

      /**
       * Handles `blur` event on this element.
       *
       * @param event The event.
       * @param event.target The event target.
       * @param event.relatedTarget The event relatedTarget.
       */

      function _checkSetHasSlot(e) {
        var _t$assignedElements$l, _t$assignedElements;
        const t = e.target;
        const dataPostfix = t.getAttribute('data-postfix');
        const postfix = dataPostfix ? `-${dataPostfix}` : '';

        // snake `ab-cd-ef` to _has camel case _hasAbCdEf
        const hasName = `_has-${t.name}${postfix}`.replace(/-./g, c => c[1].toUpperCase());
        this[hasName] = ((_t$assignedElements$l = t === null || t === void 0 || (_t$assignedElements = t.assignedElements()) === null || _t$assignedElements === void 0 ? void 0 : _t$assignedElements.length) !== null && _t$assignedElements$l !== void 0 ? _t$assignedElements$l : 0) > 0;
      }

      /**
       * Handles `click` event on the modal container.
       *
       * @param event The event.
       */
    }, {
      kind: "method",
      key: "_handleClickContainer",
      value: function _handleClickContainer(event) {
        if (event.target.matches(this.constructor.selectorCloseButton)) {
          this._handleUserInitiatedClose(event.target);
        }
      }

      /**
       * Handles user-initiated close request of this tearsheet.
       *
       * @param triggeredBy The element that triggered this close request.
       */
    }, {
      kind: "method",
      key: "_handleUserInitiatedClose",
      value: function _handleUserInitiatedClose(triggeredBy) {
        if (this.open) {
          const init = {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              triggeredBy
            }
          };
          if (this.dispatchEvent(new CustomEvent(this.constructor.eventBeforeClose, init))) {
            this.open = false;
            this.dispatchEvent(new CustomEvent(this.constructor.eventClose, init));
          }
        }
      }
    }, {
      kind: "method",
      key: "_handleSlugChange",
      value: function _handleSlugChange(e) {
        const childItems = e.target.assignedElements();
        this._hasSlug = childItems.length > 0;
        if (this._hasSlug) {
          childItems[0].setAttribute('size', 'lg');
          this.setAttribute('slug', '');
        } else {
          this.removeAttribute('slug');
        }
      }

      /**
       * Optional aria label for the tearsheet
       */
    }, {
      kind: "field",
      decorators: [property({
        reflect: true,
        attribute: 'aria-label'
      })],
      key: "ariaLabel",
      value() {
        return '';
      }
    }, {
      kind: "field",
      decorators: [property({
        reflect: true,
        attribute: 'close-icon-description'
      })],
      key: "closeIconDescription",
      value() {
        return 'Close';
      }
    }, {
      kind: "field",
      decorators: [property({
        reflect: true,
        type: Boolean,
        attribute: 'has-close-icon'
      })],
      key: "hasCloseIcon",
      value() {
        return false;
      }
    }, {
      kind: "field",
      decorators: [property({
        reflect: true,
        attribute: 'influencer-placement'
      })],
      key: "influencerPlacement",
      value() {
        return TEARSHEET_INFLUENCER_PLACEMENT.RIGHT;
      }
    }, {
      kind: "field",
      decorators: [property({
        reflect: true,
        attribute: 'influencer-width'
      })],
      key: "influencerWidth",
      value() {
        return TEARSHEET_INFLUENCER_WIDTH.NARROW;
      }
    }, {
      kind: "field",
      decorators: [property({
        type: Boolean,
        reflect: true
      })],
      key: "open",
      value() {
        return false;
      }
    }, {
      kind: "field",
      decorators: [property({
        type: Boolean,
        attribute: 'prevent-close-on-click-outside'
      })],
      key: "preventCloseOnClickOutside",
      value() {
        return false;
      }
    }, {
      kind: "field",
      decorators: [property({
        reflect: true,
        attribute: 'selector-initial-focus',
        type: String
      })],
      key: "selectorInitialFocus",
      value: void 0
    }, {
      kind: "field",
      decorators: [property({
        reflect: true,
        attribute: 'width'
      })],
      key: "width",
      value() {
        return TEARSHEET_WIDTH.NARROW;
      }
    }, {
      kind: "field",
      key: "_checkUpdateActionSizes",
      value() {
        return () => {
          if (this._actions) {
            for (let i = 0; i < this._actions.length; i++) {
              this._actions[i].setAttribute('size', this.width === 'wide' ? '2xl' : 'xl');
            }
          }
        };
      }
    }, {
      kind: "field",
      key: "_maxActions",
      value() {
        return 4;
      }
    }, {
      kind: "method",
      key: "_handleActionsChange",
      value:
      /**
       * Sets the close button icon description
       */
      /**
       * Enable a close icon ('x') in the header area of the tearsheet. By default,
       * (when this prop is omitted, or undefined or null) a tearsheet does not
       * display a close icon if there are navigation actions ("transactional
       * tearsheet") and displays one if there are no navigation actions ("passive
       * tearsheet"), and that behavior can be overridden if required by setting
       * this prop to either true or false.
       */
      /**
       * The placement of the influencer section, 'left' or 'right'.
       */
      /**
       * The width of the influencer section, 'narrow' or 'wide'.
       */
      /**
       * `true` if the tearsheet should be open.
       */
      /**
       * Prevent closing on click outside of tearsheet
       */
      /**
       * The initial location of focus in the side panel
       */
      /**
       * The width of the influencer section, 'narrow' or 'wide'.
       */
      function _handleActionsChange(e) {
        var _actions$length;
        const target = e.target;
        const actions = target === null || target === void 0 ? void 0 : target.assignedElements();
        const actionsCount = (_actions$length = actions === null || actions === void 0 ? void 0 : actions.length) !== null && _actions$length !== void 0 ? _actions$length : 0;
        if (actionsCount > this._maxActions) {
          this._actionsCount = this._maxActions;
          console.error(`Too many tearsheet actions, max ${this._maxActions}.`);
        } else {
          this._actionsCount = actionsCount;
        }
        for (let i = 0; i < (actions === null || actions === void 0 ? void 0 : actions.length); i++) {
          if (i + 1 > this._maxActions) {
            // hide excessive tearsheet actions
            actions[i].setAttribute('hidden', 'true');
            actions[i].setAttribute(`data-actions-limit-${this._maxActions}-exceeded`, `${actions.length}`);
          } else {
            actions[i].classList.add(`${blockClassActionSet}__action-button`);
          }
        }
        this._checkUpdateActionSizes();
      }

      // Data structure to communicate the state of tearsheet stacking
      // (i.e. when more than one tearsheet is open). Each tearsheet supplies a
      // handler to be called whenever the stacking of the tearsheets changes, which
      // happens when a tearsheet opens or closes. The 'open' array contains one
      // handler per OPEN tearsheet ordered from lowest to highest in visual z-order.
      // The 'all' array contains all the handlers for open and closed tearsheets.
    }, {
      kind: "field",
      decorators: [state()],
      key: "_stackDepth",
      value() {
        return -1;
      }
    }, {
      kind: "field",
      decorators: [state()],
      key: "_stackPosition",
      value() {
        return -1;
      }
    }, {
      kind: "field",
      key: "_topOfStack",
      value() {
        return () => {
          return this._stackDepth === this._stackPosition;
        };
      }
    }, {
      kind: "field",
      static: true,
      key: "_stack",
      value() {
        return {
          open: [],
          all: []
        };
      }
    }, {
      kind: "field",
      key: "_notifyStack",
      value() {
        return () => {
          CDSTearsheet._stack.all.forEach(handler => {
            handler(Math.min(CDSTearsheet._stack.open.length, maxStackDepth), CDSTearsheet._stack.open.indexOf(handler) + 1);
          });
        };
      }
    }, {
      kind: "field",
      key: "_handleStackChange",
      value() {
        return (newDepth, newPosition) => {
          this._stackDepth = newDepth;
          this._stackPosition = newPosition;
          if (this._stackDepth > 1 && this._stackPosition > 0) {
            this.setAttribute('stack-position', `${newPosition}`);
            this.setAttribute('stack-depth', `${this._stackDepth}`);
          } else {
            this.removeAttribute('stack-position');
            this.removeAttribute('stack-depth');
          }
        };
      }
    }, {
      kind: "field",
      key: "_updateStack",
      value() {
        return () => {
          if (this.open) {
            CDSTearsheet._stack.open.push(this._handleStackChange);
          } else {
            const indexOpen = CDSTearsheet._stack.open.indexOf(this._handleStackChange);
            if (indexOpen >= 0) {
              CDSTearsheet._stack.open.splice(indexOpen, 1);
            }
          }
          this._notifyStack();
        };
      }
    }, {
      kind: "field",
      key: "actionsMultiple",
      value() {
        return ['', 'single', 'double', 'triple'][this._actionsCount];
      }
    }, {
      kind: "method",
      key: "connectedCallback",
      value: function connectedCallback() {
        _superPropGet(CDSTearsheet, "connectedCallback", this, 3)([]);
        CDSTearsheet._stack.all.push(this._handleStackChange);
      }
    }, {
      kind: "method",
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        _superPropGet(CDSTearsheet, "disconnectedCallback", this, 3)([]);
        const indexAll = CDSTearsheet._stack.all.indexOf(this._handleStackChange);
        CDSTearsheet._stack.all.splice(indexAll, 1);
        const indexOpen = CDSTearsheet._stack.all.indexOf(this._handleStackChange);
        CDSTearsheet._stack.open.splice(indexOpen, 1);
      }
    }, {
      kind: "method",
      key: "render",
      value: function render() {
        const {
          closeIconDescription,
          influencerPlacement,
          influencerWidth,
          open,
          width
        } = this;
        const actionsMultiple = ['', 'single', 'double', 'triple'][this._actionsCount];
        const headerFieldsTemplate = html(_t || (_t = _`<div
      class=${0}>
      <h2 class=${0} ?hidden=${0}>
        <slot name="label" @slotchange=${0}></slot>
      </h2>
      <h3
        class=${0}
        ?hidden=${0}>
        <slot name="title" @slotchange=${0}></slot>
      </h3>
      <div
        class=${0}
        ?hidden=${0}>
        <slot name="description" @slotchange=${0}></slot>
      </div>
    </div>`), `${blockClass}__header-fields`, `${blockClassModalHeader}__label`, !this._hasLabel, this._checkSetHasSlot, `${blockClassModalHeader}__heading ${blockClass}__heading`, !this._hasTitle, this._checkSetHasSlot, `${blockClass}__header-description`, !this._hasDescription, this._checkSetHasSlot);
        const headerActionsTemplate = html(_t2 || (_t2 = _` <div
      class=${0}
      ?hidden=${0}>
      <slot name="header-actions" @slotchange=${0}></slot>
    </div>`), `${blockClass}__header-actions`, !this._hasHeaderActions || this.width === 'narrow', this._checkSetHasSlot);
        const headerTemplate = html(_t3 || (_t3 = _` <cds-modal-header
      class=${0}
      ?has-close-icon=${0}
      ?has-navigation=${0}
      ?has-header-actions=${0}
      ?has-actions=${0}
      ?has-slug=${0}
      width=${0}>
      ${0}

      <div
        class=${0}
        ?hidden=${0}>
        <slot
          name="header-navigation"
          @slotchange=${0}></slot>
      </div>
      <slot name="slug" @slotchange=${0}></slot>
      ${0}
    </cds-modal-header>`), `${blockClass}__header`, this.hasCloseIcon || (this === null || this === void 0 ? void 0 : this._actionsCount) === 0, this._hasHeaderNavigation && this.width === 'wide', this._hasHeaderActions && this.width === 'wide', (this === null || this === void 0 ? void 0 : this._actionsCount) > 0, this === null || this === void 0 ? void 0 : this._hasSlug, width, this.width === TEARSHEET_WIDTH.WIDE ? html(_t4 || (_t4 = _`<cds-layer level="1" class=${0}
            >${0}${0}</cds-layer
          >`), `${blockClass}__header-content`, headerFieldsTemplate, headerActionsTemplate) : html(_t5 || (_t5 = _`<div>${0}${0}</div>`), headerFieldsTemplate, headerActionsTemplate), `${blockClass}__header-navigation`, !this._hasHeaderNavigation || this.width === 'narrow', this._checkSetHasSlot, this._handleSlugChange, this.hasCloseIcon || (this === null || this === void 0 ? void 0 : this._actionsCount) === 0 ? html(_t6 || (_t6 = _`<cds-modal-close-button
            close-button-label=${0}
            @click=${0}></cds-modal-close-button>`), closeIconDescription, this._handleUserInitiatedClose) : '');
        return html(_t7 || (_t7 = _`
      <a
        id="start-sentinel"
        class="${0}--visually-hidden"
        href="javascript:void 0"
        role="navigation"></a>
      <div
        aria-label=${0}
        class=${0}
        part="dialog"
        role="complementary"
        ?open=${0}
        ?opening=${0}
        ?closing=${0}
        width=${0}
        stack-position=${0}
        stack-depth=${0}
        @click=${0}>
        <!-- Header -->
        ${0}

        <!-- Body  -->
        <cds-modal-body class=${0} width=${0}>
          <!-- Influencer when on left -->
          ${0}

          <div class=${0}>
            <div class=${0}>
              <div class=${0}>
                <cds-layer level="0">
                  <slot></slot>
                </cds-layer>
              </div>

              <!-- Influencer when on right -->
              ${0}
            </div>
            <!-- Action buttons -->
            <cds-button-set-base
              class=${0}
              actions-multiple=${0}
              ?tearsheet-wide=${0}
              ?hidden=${0}>
              <slot
                name="actions"
                @slotchange=${0}></slot>
            </cds-button-set-base>
          </div>
        </cds-modal-body>
      </div>
      <a
        id="end-sentinel"
        class="${0}--visually-hidden"
        href="javascript:void 0"
        role="navigation"></a>
    `), prefix, this.ariaLabel, `${blockClass}__container ${prefix}--modal-container ${prefix}--modal-container--sm`, this._isOpen, open && !this._isOpen, !open && this._isOpen, width, this._stackPosition, this._stackDepth, this._handleClickContainer, headerTemplate, `${blockClass}__body`, width, influencerPlacement !== TEARSHEET_INFLUENCER_PLACEMENT.RIGHT ? html(_t8 || (_t8 = _`<div
                class=${0}
                ?wide=${0}
                ?hidden=${0}>
                <slot
                  name="influencer"
                  data-postfix="left"
                  @slotchange=${0}></slot>
              </div>`), `${blockClass}__influencer`, influencerWidth === 'wide', !this._hasInfluencerLeft || this.width === TEARSHEET_WIDTH.NARROW, this._checkSetHasSlot) : '', `${blockClass}__right`, `${blockClass}__main`, `${blockClass}__content`, influencerPlacement === TEARSHEET_INFLUENCER_PLACEMENT.RIGHT ? html(_t9 || (_t9 = _`<div
                    class=${0}
                    ?wide=${0}
                    ?hidden=${0}>
                    <slot
                      name="influencer"
                      data-postfix="right"
                      @slotchange=${0}></slot>
                  </div>`), `${blockClass}__influencer`, influencerWidth, !this._hasInfluencerRight || this.width === TEARSHEET_WIDTH.NARROW, this._checkSetHasSlot) : '', `${blockClass}__buttons ${blockClass}__button-container`, actionsMultiple, width === 'wide', this._actionsCount === 0, this._handleActionsChange, prefix);
      }
    }, {
      kind: "field",
      key: "_checkSetOpen",
      value() {
        return () => {
          const {
            _tearsheet: tearsheet
          } = this;
          if (tearsheet && this._isOpen) {
            // wait until the tearsheet has transitioned off the screen to remove
            tearsheet.addEventListener('transitionend', () => {
              this._isOpen = false;
            });
          } else {
            // allow the html to render before animating in the tearsheet
            window.requestAnimationFrame(() => {
              this._isOpen = this.open;
            });
          }
        };
      }
    }, {
      kind: "method",
      key: "updated",
      value: async function updated(changedProperties) {
        if (changedProperties.has('width')) {
          this._checkUpdateActionSizes();
        }
        if (process.env.NODE_ENV === 'development' && (changedProperties.has('width') || changedProperties.has('_hasHeaderNavigation') || changedProperties.has('_hasInfluencerLeft') || changedProperties.has('_hasInfluencerRight') || changedProperties.has('_hasHeaderActions'))) {
          if (this.width === 'narrow') {
            if (this._hasHeaderNavigation) {
              console.error(`Header navigation is not permitted in narrow Tearsheet.`);
            }
            if (this._hasInfluencerLeft || this._hasInfluencerRight) {
              console.error(`Influencer is not permitted in narrow Tearsheet.`);
            }
            if (this._hasHeaderActions) {
              console.error(`Header actions are not permitted in narrow Tearsheet.`);
            }
          }
        }
        if (changedProperties.has('open')) {
          this._updateStack();
          this._checkSetOpen();
          if (this.open) {
            this._launcher = this.ownerDocument.activeElement;
            const focusNode = this.selectorInitialFocus && this.querySelector(this.selectorInitialFocus);
            await this.constructor._delay();
            if (focusNode) {
              // For cases where a `carbon-web-components` component (e.g. `<cds-button>`) being `primaryFocusNode`,
              // where its first update/render cycle that makes it focusable happens after `<cds-tearsheet>`'s first update/render cycle
              focusNode.focus();
            } else if (!tryFocusElems(this.querySelectorAll(this.constructor.selectorTabbable), true)) {
              this.focus();
            }
          } else if (this._launcher && typeof this._launcher.focus === 'function') {
            this._launcher.focus();
            this._launcher = null;
          }
        }
      }

      /**
       * @param ms The number of milliseconds.
       * @returns A promise that is resolves after the given milliseconds.
       */
    }, {
      kind: "method",
      static: true,
      key: "_delay",
      value: function _delay(ms = 0) {
        return new Promise(resolve => {
          setTimeout(resolve, ms);
        });
      }

      /**
       * A selector selecting buttons that should close this modal.
       */
    }, {
      kind: "get",
      static: true,
      key: "selectorCloseButton",
      value: function () {
        return `[data-modal-close],${prefix}-modal-close-button`;
      }

      /**
       * A selector selecting tabbable nodes.
       */
    }, {
      kind: "get",
      static: true,
      key: "selectorTabbable",
      value: function () {
        return selectorTabbable;
      }

      /**
       * The name of the custom event fired before this tearsheet is being closed upon a user gesture.
       * Cancellation of this event stops the user-initiated action of closing this tearsheet.
       */
    }, {
      kind: "get",
      static: true,
      key: "eventBeforeClose",
      value: function () {
        return `${prefix}-tearsheet-beingclosed`;
      }

      /**
       * The name of the custom event fired after this tearsheet is closed upon a user gesture.
       */
    }, {
      kind: "get",
      static: true,
      key: "eventClose",
      value: function () {
        return `${prefix}-tearsheet-closed`;
      }

      /**
       * The name of the custom event fired on clicking the navigate back button
       */
    }, {
      kind: "get",
      static: true,
      key: "eventNavigateBack",
      value: function () {
        return `${prefix}-tearsheet-header-navigate-back`;
      }
    }, {
      kind: "field",
      static: true,
      key: "styles",
      value() {
        return styles;
      }
    }]
  };
}, HostListenerMixin(LitElement));
export default CDSTearsheet;
//# sourceMappingURL=tearsheet.js.map
